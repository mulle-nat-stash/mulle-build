#! /bin/sh
#
#   Copyright (c) 2016 Nat! - Mulle kybernetiK
#   Copyright (c) 2016 Nat! - Codeon GmbH
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.

MULLE_INSTALL_VERSION="0.3"

PATH="`pwd -P`/addictions/bin:$HOME/.linuxbrew/bin:/usr/local/bin:${HOME}/bin:${PATH}"


usage()
{
   cat <<EOF >&2
usage:
   ${executable} [options] [url|clean]

   Options:
      -b <tag|branch> : specify tag or branch to fetch from URL
      -d              : build debug
      -f              : don't build dependencies with mulle-bootstrap
                        Embedded_repositories will be fetched though.
      -m <executable> : specify make program to use
      -p <prefix>     : install prefix (default: ${DEFAULT_INSTALL})
      -s <scm>        : specify an SCM other than git (e.g. svn)

   Arguments:
      clean           : clean project
      url             : URL to clone, build and install.
                        If no URL is specified, mulle-install will use "local
                        mode". The current directory is assumed to be the
                        project directory.
                        "Local mode" is limited to cmake projects.
EOF
   exit 1
}



do_clone_magic()
{
   local url
   local scm
   local tag
   local prefix

   url="$1"
   [ $# -ne 0 ] && shift
   tag="$1"
   [ $# -ne 0 ] && shift
   scm="$1"
   [ $# -ne 0 ] && shift
   prefix="$1"
   [ $# -ne 0 ] && shift
   debug="$1"
   [ $# -ne 0 ] && shift


   [ -z "${url}" ] && fail "URL is empty"

   #
   # if url is local directory, make relative absolute
   #
   case "${url}" in
      /*|*:/*)
      ;;

      *)
         if [ -d "${url}" ]
         then
            url="`pwd -P`/${url}"
         fi
      ;;
   esac

   local random
   local debugoptions

   if [ ! -z "${debug}" ]
   then
      debugoptions="--configuration Debug"
   fi

   random=`exekutor mktemp -d -t "mulle-install.XXXX"`

   (
      exekutor cd "${random}"|| exit 1 ;
      exekutor mulle-bootstrap init -n ;
      exekutor echo "$url;;$tag;$scm" > .bootstrap/repositories
      exekutor mulle-bootstrap  ${BOOTSTRAP_FLAGS} -a bootstrap ${debugoptions} "$@" || exit 1
      if [ -z "${DONT_INSTALL}" ]
      then
         if [ -z "${prefix}" ]
         then
            exekutor mulle-bootstrap install || exit 1
         else
            exekutor mulle-bootstrap install "${prefix}" || exit 1
         fi
      fi
   )
   if [ -z "${DONT_REMOVE}" ]
   then
      exekutor chmod -R ugo+w "${random}"
      exekutor rm -rf "${random}"
   else
      log_info "Build in \"${random}\""
   fi
}


do_dependencies()
{
   if [ ! -d .bootstrap ]
   then
      return
   fi

   #
   # assume .bootstrap.auto is setup correctly
   # in OPTIMISTIC mode, that means we don't refresh or fetch
   #
   if [ -d .bootstrap.auto -a ! -z "${OPTIMISTIC}" ]
   then
      if [ "${FETCH_ONLY}" = "YES" ]
      then
         return
      fi
      BOOTSTRAP_FLAGS="${BOOTSTRAP_FLAGS} --skip-refresh"
   fi

   if [ "${FETCH_ONLY}" = "YES" ]
   then
      # only fetch, but don't build
      exekutor mulle-bootstrap ${BOOTSTRAP_FLAGS} fetch || exit 1 # --embedded-only
   else
      exekutor mulle-bootstrap ${BOOTSTRAP_FLAGS} || exit 1
   fi

   #
   # after the first fetch don't warn about scripts again
   #
   if [ "`basename "$executable"`" = "mulle-build" ]
   then
      log_verbose "Don't warn about scripts next build"
      mulle-bootstrap config --on dont_warn_scripts
   fi
}


setup_make_environment()
{
   if [ -z "${MAKE}" ]
   then
      case "`uname`" in
         MINGW*)
            MAKE="nmake"
         ;;

         *)
            MAKE="make"
         ;;
      esac
   fi

   if [ -z "${CMAKE_GENERATOR}" ]
   then
      case "${MAKE}" in
         nmake*)
            CMAKE_GENERATOR="NMake Makefiles"
         ;;

         *)
            CMAKE_GENERATOR="Unix Makefiles"
         ;;
      esac
   fi
}


do_build()
{
   local debugoptions

   if [ ! -z "${debug}" ]
   then
      debugoptions="-DCMAKE_BUILD_TYPE=Debug"
   fi

   local relative

   case "${BUILDDIR}" in
      */*)
        relative="`perfect_relative_path_between "${PWD}" "${BUILDDIR}"`"
      ;;

      *)
         relative=".."
      ;;
   esac

   mkdir "${BUILDDIR}" 2> /dev/null
   (
      # CMAKE_FLAGS same as in mulle-bootstrap
      exekutor cd "${BUILDDIR}" ;
      exekutor cmake -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}" \
                     -G "${CMAKE_GENERATOR}" \
                     ${debugoptions} \
                     ${CMAKE_FLAGS} \
                     "$@" \
                     "${relative}" || exit 1
   )
}


#
# if we are using brew the dependencies are also installed via
# brew, otherwise install dependencies too
#
do_install()
{
   local command

   if [ -z "${DONT_INSTALL}" ]
   then
      command="install"
   fi

   (
      exekutor cd build ;
      exekutor "${MAKE}" ${MAKE_FLAGS} ${command} || exit 1 ;


      if [ -d .bootstrap -a -z "${FETCH_ONLY}" -a -z "${DONT_INSTALL}" ]
      then
         exekutor mulle-bootstrap install "${CMAKE_INSTALL_PREFIX}" || exit 1
      fi
   )
}


setup_bootstrap_environment()
{
   local libexec

   libexec="`mulle-bootstrap library-path 2> /dev/null | head -1`"
   if [ -z "${libexec}" ]
   then
      echo "mulle-bootstrap not installed or not in PATH" >&2
      exit 1
   fi

   PATH="${libexec}:$PATH"

   . mulle-bootstrap-logging.sh
   . mulle-bootstrap-functions.sh
}


main()
{
   setup_bootstrap_environment

   local executable

   BOOTSTRAP_FLAGS=
   BUILDDIR="${BUILDDIR:-build}"

   executable=`basename "$0"`

   if [ "`basename "$executable"`" = "mulle-build" ]
   then
      DONT_INSTALL="YES"
   fi

   case "`uname`" in
      MINGW*)
         DEFAULT_INSTALL="~"
      ;;

      *)
         DEFAULT_INSTALL="/usr/local"
      ;;
   esac

   while [ $# -ne 0 ]
   do
      case "$1" in
         -a|-y)
            BOOTSTRAP_FLAGS="${BOOTSTRAP_FLAGS} $1"
         ;;

         -b|--tag|--branch)
            shift
            [ $# -eq 0 ] && usage

            TAG="$1"
         ;;

         -d|--debug)
            DEBUG="YES"
         ;;

         -nr|--no-remove)
            DONT_REMOVE="YES"
         ;;

         -ni|--no-install)
            DONT_INSTALL="YES"
         ;;

         -l|--optimistic|--lucky)
            BOOTSTRAP_FLAGS="${BOOTSTRAP_FLAGS} $1"
            OPTIMISITIC="YES"
         ;;

         -f|--fetch|--brew)  # brew is historic :)
            FETCH_ONLY="YES"
         ;;

         -m|--make)
            shift
            [ $# -eq 0 ] && usage

            MAKE="$1"
         ;;

         -p|--prefix)
            shift
            [ $# -eq 0 ] && usage

            CMAKE_INSTALL_PREFIX="$1"
         ;;

         -s|--scm)
            shift
            [ $# -eq 0 ] && usage

            SCM="$1"
         ;;

         -n|--dry-run)
            MULLE_EXECUTOR_DRY_RUN="YES"
         ;;

         -te|--trace-execution)
            BOOTSTRAP_FLAGS="${BOOTSTRAP_FLAGS} $1"
            MULLE_EXECUTOR_TRACE="YES"
         ;;

         -t|--trace)
            BOOTSTRAP_FLAGS="${BOOTSTRAP_FLAGS} $1"
            set -x
         ;;

         -v|--verbose)
            BOOTSTRAP_FLAGS="${BOOTSTRAP_FLAGS} $1"
            MULLE_BOOTSTRAP_FLUFF="NO"
            MULLE_BOOTSTRAP_VERBOSE="YES"
         ;;

         -vv|--very-verbose)
            BOOTSTRAP_FLAGS="${BOOTSTRAP_FLAGS} $1"
            MULLE_BOOTSTRAP_FLUFF="YES"
            MULLE_BOOTSTRAP_VERBOSE="YES"
         ;;

         -vvv|--very-verbose-with-settings)
            BOOTSTRAP_FLAGS="${BOOTSTRAP_FLAGS} $1"
            MULLE_BOOTSTRAP_FLUFF="YES"
            MULLE_BOOTSTRAP_VERBOSE="YES"
            MULLE_EXECUTOR_TRACE="YES"
         ;;

         --version)
            echo "${MULLE_INSTALL_VERSION}"
            exit 0
         ;;

         -h|--help)
            usage
         ;;

         -*)
            fail "unknown option \"$1\""
         ;;

         *)
            break
         ;;
      esac

      shift
   done


   URL="$1"
   [ $# -ne 0 ] && shift

   case "${URL}" in
      "")
         setup_make_environment

         [ -z "${TAG}" ]        || fail "-t option is not compatible with local mode"
         [ -z "${SCM}" ]        || fail "-s option is not compatible with local mode"

         do_dependencies
         [ ! -f CMakeLists.txt ] && fail "Can only build cmake based projects, in local mode"
         do_build "$@"
         do_install
      ;;

      clean)
         local cleandefault

         if [ $# -eq 0 ]
         then
            if [ -z "${DONT_INSTALL}" ]
            then
               cleandefault=dist    # mulle-install clean
            else
               cleandefault=output  # mulle-build clean
            fi
         fi

         mulle-bootstrap clean "$@" ${cleandefault}
      ;;

      *)
         [ -z "${FETCH_ONLY}" ] || fail "-f option is not compatible with URL install"
         [ -z "${MAKE}" ]       || fail "-m option is not compatible with URL install"

         do_clone_magic "${URL}" "${TAG}" "${SCM}" "${CMAKE_INSTALL_PREFIX}" "${DEBUG}" "$@"
      ;;
   esac
}

main "$@"
