#! /bin/sh
#
#   Copyright (c) 2016 Nat! - Mulle kybernetiK
#   Copyright (c) 2016 Nat! - Codeon GmbH
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions are met:
#
#   Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
#   Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
#   Neither the name of Mulle kybernetiK nor the names of its contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#   POSSIBILITY OF SUCH DAMAGE.

MULLE_INSTALL_VERSION="0.5.2"

MULLE_BOOTSTRAP_MIN_MAJOR="2"
MULLE_BOOTSTRAP_MIN_MINOR="1"


PATH="`pwd -P`/addictions/bin:$HOME/.linuxbrew/bin:/usr/local/bin:${HOME}/bin:${PATH}"


usage()
{
      cat <<EOF >&2
usage:
   ${executable} [options] [url]

   Options:
EOF

   case "$1" in
      build|install)
         cat <<EOF >&2
      -b <tag|branch> : specify tag or branch to fetch from URL
      -d              : build debug
      -f              : don't build dependencies with mulle-bootstrap
                        Embedded_repositories will be fetched though.
      -m <executable> : specify make program to use
EOF
         if [ "$1" = "install" ]
         then

            cat <<EOF >&2
      -p <prefix>     : install prefix (default: ${DEFAULT_INSTALL})
EOF
         fi

         cat <<EOF >&2
      -s <scm>        : specify an SCM other than git (e.g. svn)
EOF

         if [ "$1" = "install" ]
         then
            cat <<EOF >&2
   Arguments:
      url             : If no URL is specified, install will use "local
                        mode". The current directory is assumed to be the
                        project directory.
                        "Local mode" is limited to cmake projects.
EOF
         fi
      ;;

      clean)
         cat <<EOF >&2
      -m <executable> : specify make program to use
EOF
      ;;
   esac

   exit 1
}


#
# Local Mode
#
do_fetch_dependencies()
{
   if fetch_needed
   then
      exekutor mulle-bootstrap ${BOOTSTRAP_FLAGS} fetch ${BOOTSTRAP_OPTIONS} || exit 1 # --embedded-only
      log_fluff "FINISHED: mulle-bootstrap fetch"

      #
      # after the first fetch don't warn about scripts again
      #
      if [ "`basename "$executable"`" = "mulle-build" ]
      then
         log_verbose "Don't warn about scripts next build"
         exekutor mulle-bootstrap config --on dont_warn_scripts
      fi
   fi
}


do_build_dependencies()
{
   if build_needed
   then
      exekutor mulle-bootstrap ${BOOTSTRAP_FLAGS} build ${BOOTSTRAP_OPTIONS} || exit 1
      log_fluff "FINISHED: mulle-bootstrap build"
   fi
}


do_install_dependencies()
{
   if [ -z "${CMAKE_INSTALL_PREFIX}" ]
   then
      exekutor mulle-bootstrap install ${BOOTSTRAP_OPTIONS}  || exit 1
   else
      exekutor mulle-bootstrap install ${BOOTSTRAP_OPTIONS} "${CMAKE_INSTALL_PREFIX}" || exit 1
   fi
   log_fluff "FINISHED: mulle-bootstrap install"
}


cmake_clean()
{
   log_verbose "Deleting build/CMakeFiles"
   exekutor rm -rf build/CMakeFiles 2> /dev/null

   log_verbose "Deleting build/CMakeCache.txt"
   exekutor rm build/CMakeCache.txt 2> /dev/null
}


need_cmake_clean()
{
   if [ ! -f "${BUILDDIR}/CMakeFiles" ]
   then
      return 0
   fi

   if [ .CC -nt "${BUILDDIR}/CMakeFiles" ]
   then
      return 0
   fi

   if [ .CXX -nt "${BUILDDIR}/CMakeFiles" ]
   then
      return 0
   fi

   return 1
}


need_cmake_build()
{
   if [ ! -f "${BUILDDIR}/CMakeFiles" ]
   then
      return 0
   fi

   if [ CMakeFiles.txt -nt "${BUILDDIR}/CMakeFiles.txt" ]
   then
      return 0
   fi

   return 1
}


_do_cmake()
{
   local cmakeflags

   [ -z "${CMAKE_GENERATOR}" ] && fail "empty CMAKE_GENERATOR"

   if [ -z "${DEBUG}" ]
   then
      cmakeflags="-DCMAKE_BUILD_TYPE=Release"
   else
      cmakeflags="-DCMAKE_BUILD_TYPE=Debug"
   fi

   local relative

   case "${BUILDDIR}" in
      */*)
        relative="`perfect_relative_path_between "${PWD}" "${BUILDDIR}"`"
      ;;

      *)
         relative=".."
      ;;
   esac

   #
   # Figure out C/CXX compiler (only for current) project
   #
   local  cc

   cc="`cat .CC 2> /dev/null`"
   if [ ! -z "${cc}" ]
   then
      log_verbose "Compiler ${C_RESET_BOLD}CC${C_VERBOSE} set to ${C_MAGENTA}${C_BOLD}${cc}${C_VERBOSE} found in \".CC\""
      CMAKE_FLAGS="`concat "${CMAKE_FLAGS}" "-DCMAKE_C_COMPILER=${cc}"`"
   fi

   local  cxx

   cxx="`cat .CXX 2> /dev/null`"
   if [ ! -z "${cxx}" ]
   then
      log_verbose "Compiler ${C_RESET_BOLD}CXX${C_VERBOSE} set to ${C_MAGENTA}${C_BOLD}${cxx}${C_VERBOSE} found in \".CXX\""
      CMAKE_FLAGS="`concat "${CMAKE_FLAGS}" "-DCMAKE_CXX_COMPILER=${cxx}"`"
   fi

   mkdir "${BUILDDIR}" 2> /dev/null
   (
      # CMAKE_FLAGS same as in mulle-bootstrap
      exekutor cd "${BUILDDIR}" ;

      # lameness, but want to allow spaces in prefix
      if [ -z "${CMAKE_INSTALL_PREFIX}" ]
      then
         exekutor cmake -G "${CMAKE_GENERATOR}" \
                        ${cmakeflags} \
                        ${CMAKE_FLAGS} \
                        "$@" \
                        "${relative}" || exit 1
      else
         exekutor cmake -DCMAKE_INSTALL_PREFIX="${CMAKE_INSTALL_PREFIX}" \
                        -G "${CMAKE_GENERATOR}" \
                        ${cmakeflags} \
                        ${CMAKE_FLAGS} \
                        "$@" \
                        "${relative}" || exit 1
      fi
   )
}


do_cmake()
{
   local skip_build

   skip_build="${OPTIMISTIC}"

   if need_cmake_clean
   then
      cmake_clean
      skip_build="NO"
   fi


   if [ skip_build = "NO" ] || need_cmake_build
   then
      _do_cmake "$@"
   fi
}


#
# if we are using brew the dependencies are also installed via
# brew, otherwise install dependencies too
#
do_make()
{
   local command

   command="$1"
   shift

   (
      exekutor cd build ;
      exekutor "${MAKE}" ${MAKE_FLAGS} ${command}  || exit 1 ;
   )
}


#
#
#
setup_make_environment()
{
   if [ -z "${MAKE}" ]
   then
      case "`uname`" in
         MINGW*)
            MAKE="nmake"
         ;;

         *)
            MAKE="make"
         ;;
      esac
   fi

   if [ -z "${CMAKE_GENERATOR}" ]
   then
      case "${MAKE}" in
         nmake*)
            CMAKE_GENERATOR="NMake Makefiles"
         ;;

         *)
            CMAKE_GENERATOR="Unix Makefiles"
         ;;
      esac
   fi
}


check_mulle_bootstrap_version()
{
   local version
   local major
   local minor

   version="`mulle-bootstrap version | head -1`"
   [ -z "${version}" ] && fail "mulle-bootstrap did not provide a version"

   major="`echo "${version}" | cut -s -d. -f1`"
   if [ "${major}" -gt "${MULLE_BOOTSTRAP_MIN_MAJOR}" ]
   then
      return 1
   fi

   if [ "${major}" -eq "${MULLE_BOOTSTRAP_MIN_MAJOR}" ]
   then
      minor="`echo "${version}" | cut -s -d. -f2`"
      if [ "${minor}" -lt "${MULLE_BOOTSTRAP_MIN_MINOR}" ]
      then
         return 1
      fi
   fi

   return 0
}


setup_bootstrap_environment()
{
   local libexec

   libexec="`mulle-bootstrap library-path 2> /dev/null | head -1`"
   if [ -z "${libexec}" ]
   then
      echo "mulle-bootstrap not installed or not in PATH" >&2
      exit 1
   fi

   PATH="${libexec}:$PATH"

   . mulle-bootstrap-logging.sh
   . mulle-bootstrap-functions.sh
   . mulle-bootstrap-local-environment.sh

   if check_mulle_bootstrap_version
   then
      return
   fi

   fail "$executable: mulle-bootstrap needs to be updated."
}


git_pull()
{
   local branch
   local origin

   log_fluff ":.:pull:.:"

   branch="`git rev-parse --abbrev-ref HEAD`"
   if [ -d ".git/refs/remotes/origin" ]
   then
      origin="${ORIGIN:-origin}"
   else
      origin="`git remote | head -1`"
   fi

   if [ ! -z "${origin}" ]
   then
      git pull "${origin}" "${branch}"  # or what ?
   fi
}


local_clean()
{
   log_fluff ":.:clean:.:"

   case "$1" in
      cmake)
         cmake_clean >&2
         return
      ;;


      ""|*)
         if [ -d "build" ]
         then
            log_info "Deleting build"
            exekutor rm -rf build
         fi
      ;;
   esac
}


local_mode()
{
   log_fluff ":.:local mode:.:"

   setup_make_environment

   [ -z "${TAG}" ] || fail "$executable: -b option is not compatible with local mode."
   [ -z "${SCM}" ] || fail "$executable: -s option is not compatible with local mode."

   if [ -d .bootstrap ]
   then
      do_fetch_dependencies
      if [ -z "${DONT_BUILD_DEPENDENCIES}" ]
      then
         do_build_dependencies
      fi
   else
      log_fluff "No .bootstrap found, so not bootstrapping"
   fi

   if [ -z "${DONT_BUILD}" ]
   then
      [ ! -f CMakeLists.txt ] && fail "$executable: Can only build cmake based projects, in local mode."
      do_cmake "$@"

      if [ -z "${DONT_INSTALL}"  ]
      then
         if [ -z "${DONT_INSTALL_DEPENDENCIES}" -a -d .bootstrap ]
         then
            do_install_dependencies
         fi
         do_make "install" "$@"
      else
         do_make "" "$@"
      fi
   fi
}


#
# URL Mode
#

url_mode()
{
   log_fluff ":.:URL mode:.:"

   [ -z "${DONT_BUILD}" ] || fail "$executable: -nb option is not compatible with URL install."
   [ -z "${MAKE}" ]       || fail "$executable: -m option is not compatible with URL install."

   local url

   url="$URL"
   [ -z "${url}" ] && fail "URL is empty"

   #
   # if url is local directory, make relative absolute
   #
   case "${url}" in
      /*|*:/*)
      ;;

      *)
         if [ -d "${url}" ]
         then
            url="`pwd -P`/${url}"
         fi
      ;;
   esac

   local random
   local bootstrapoptions

   if [ -z "${DEBUG}" ]
   then
      bootstrapoptions="--configuration Release"
   else
      bootstrapoptions="--configuration Debug"
   fi

   local command

   random=`exekutor mktemp -d -t "mulle-install.XXXX"`

   (
      exekutor cd "${random}"|| exit 1 ;
      exekutor mulle-bootstrap ${BOOTSTRAP_FLAGS} init -n ;
      redirect_exekutor .bootstrap/repositories echo "${URL};;${TAG};${SCM}"
      exekutor mulle-bootstrap ${BOOTSTRAP_FLAGS} -a bootstrap ${BOOTSTRAP_OPTIONS} ${bootstrapoptions}  || exit 1

      if [ -z "${DONT_INSTALL_DEPENDENCIES}"]
      then
         if [ -z "${CMAKE_INSTALL_PREFIX}" ]
         then
            exekutor mulle-bootstrap ${BOOTSTRAP_FLAGS} install ${BOOTSTRAP_OPTIONS} || exit 1
         else
            exekutor mulle-bootstrap ${BOOTSTRAP_FLAGS} install ${BOOTSTRAP_OPTIONS} "${CMAKE_INSTALL_PREFIX}" || exit 1
         fi
      fi
   )

   if [ -z "${DONT_REMOVE}" ]
   then
      exekutor chmod -R ugo+w "${random}"
      exekutor rm -rf "${random}"
   else
      log_info "Build in \"${random}\""
   fi
}



main()
{
   local executable
   local command

   #
   # allow variations, mulle-build, mulle-install mulle-clean
   # mulle-tag etc
   #
   executable=`basename "$0"`
   command="`echo "${executable}" | cut -d- -f2`"

   setup_bootstrap_environment

   BOOTSTRAP_FLAGS=
   BOOTSTRAP_OPTIONS=
   BUILDDIR="${BUILDDIR:-build}"
   OPTIMISTIC="${OPTIMISITIC:-YES}"

   if [ "${executable}" = "mulle-build" ]
   then
      DONT_INSTALL="YES"
   fi

   case "`uname`" in
      MINGW*)
         DEFAULT_INSTALL="~"
      ;;

      *)
         DEFAULT_INSTALL="/usr/local"
      ;;
   esac

   while [ $# -ne 0 ]
   do
      touch /tmp/$1
      case "$1" in
         -b|--tag|--branch)
            shift
            [ $# -eq 0 ] && usage "${command}"

            TAG="$1"
         ;;

         -cs|--check-usr-local-include)
            BOOTSTRAP_OPTIONS="`concat "${BOOTSTRAP_OPTIONS}" "-cs"`"
         ;;

         -d|--debug)
            DEBUG="YES"
         ;;

         -e|--embedded-only)
            BOOTSTRAP_OPTIONS="`concat "${BOOTSTRAP_OPTIONS}" "-e"`"
            DONT_BUILD_DEPENDENCIES="YES"
            DONT_INSTALL_DEPENDENCIES="YES"
         ;;

         -h|--help)
            usage "${command}"
         ;;

         -m|--make)
            shift
            [ $# -eq 0 ] && usage "${command}"

            MAKE="$1"
         ;;

         -n|--dry-run)
            BOOTSTRAP_FLAGS="`concat "${BOOTSTRAP_FLAGS}" "$1"`"
            MULLE_EXECUTOR_DRY_RUN="YES"
         ;;

         -nb|--no-build)
            DONT_BUILD="YES"
            DONT_BUILD_DEPENDENCIES="YES"
            DONT_INSTALL_DEPENDENCIES="YES"
         ;;

         -nbd|--no-build-dependencies)
            DONT_BUILD_DEPENDENCIES="YES"
            DONT_INSTALL_DEPENDENCIES="YES"
         ;;

         -ni|--no-install)
            DONT_INSTALL="YES"
            DONT_INSTALL_DEPENDENCIES="YES"
         ;;

         -nid|--no-install-dependencies)
            DONT_INSTALL_DEPENDENCIES="YES"
         ;;

         -nr|--no-remove)
            DONT_REMOVE="YES"
         ;;

         -p|--prefix)
            shift
            [ $# -eq 0 ] && usage "${command}"

            CMAKE_INSTALL_PREFIX="$1"
         ;;

         -s|--scm)
            shift
            [ $# -eq 0 ] && usage "${command}"

            SCM="$1"
         ;;

         -u|--pessimistic|--unlucky)
            OPTIMISTIC="NO"
         ;;

         -t|--trace)
            BOOTSTRAP_FLAGS="`concat "${BOOTSTRAP_FLAGS}" "$1"`"
            set -x
         ;;

         -te|--trace-execution)
            touch /tmp/te
            BOOTSTRAP_FLAGS="`concat "${BOOTSTRAP_FLAGS}" "$1"`"
            MULLE_EXECUTOR_TRACE="YES"
         ;;

         -v|--verbose)
            BOOTSTRAP_FLAGS="`concat "${BOOTSTRAP_FLAGS}" "$1"`"
            MULLE_BOOTSTRAP_FLUFF="NO"
            MULLE_BOOTSTRAP_VERBOSE="YES"
         ;;

         -vv|--very-verbose)
            BOOTSTRAP_FLAGS="`concat "${BOOTSTRAP_FLAGS}" "$1"`"
            MULLE_BOOTSTRAP_FLUFF="YES"
            MULLE_BOOTSTRAP_VERBOSE="YES"
            MULLE_EXECUTOR_TRACE="YES"
         ;;

         -vvv|--very-verbose-with-settings)
            BOOTSTRAP_FLAGS="`concat "${BOOTSTRAP_FLAGS}" "$1"`"
            MULLE_BOOTSTRAP_FLUFF="YES"
            MULLE_BOOTSTRAP_VERBOSE="YES"
            MULLE_EXECUTOR_TRACE="YES"
         ;;

         -V|--verbose-build)
            BOOTSTRAP_FLAGS="`concat "${BOOTSTRAP_FLAGS}" "$1"`"
            MAKE_FLAGS="${MAKE_FLAGS} VERBOSE=1"
         ;;

         --version)
            echo "${MULLE_INSTALL_VERSION}"
            exit 0
         ;;

         -*)
            touch /tmp/def
            BOOTSTRAP_FLAGS="`concat "${BOOTSTRAP_FLAGS}" "$1"`"
         ;;

         *)
            touch /tmp/all
            break
         ;;
      esac

      shift
   done


   if [ "${OPTIMISTIC}" = "YES" ]
   then
      BOOTSTRAP_FLAGS="`concat "${BOOTSTRAP_FLAGS}" "-l"`"
   fi

   #
   # allow mulle-build clean, mulle-install clean and some other
   # obscure commands
   #
   if [ "${command}" = "build" -o "${command}" = "install" ]
   then
      case "$1" in
         clean|refresh|setup-xcode|xcode|library-path|init|fetch|dist|config|bootstrap|nomagic)
            command="$1"
            shift
         ;;
      esac
   fi

   case "${command}" in
      install|build)
         URL="$1"

         case "${URL}" in
            */*|*:*)
               url_mode "$@"
            ;;

            ""|*)
               local_mode "$@"
            ;;
         esac
      ;;

      update)
         if [ -d .git ]
         then
            git_pull
         fi
         mulle-bootstrap ${BOOTSTRAP_FLAGS} "${command}" ${BOOTSTRAP_OPTIONS} "$@" || exit 1
      ;;

      git)
         log_info "### `basename ${PWD}`:"
         git "$@" || exit 1

         mulle-bootstrap ${BOOTSTRAP_FLAGS} "${command}" ${BOOTSTRAP_OPTIONS} "$@" || exit 1
      ;;

      tag)
         git tag "$@" || exit 1
         mulle-bootstrap ${BOOTSTRAP_FLAGS} "${command}" ${BOOTSTRAP_OPTIONS} "$@" || exit 1
      ;;

      clean)
         local cleandefault

         if [ $# -eq 0 ]
         then
            if [ "${executable}" = "mulle-install" ]
            then
               cleandefault="dist"     # mulle-install clean
            fi

            if [ "${executable}" = "mulle-build" ]
            then
               cleandefault="output"   # mulle-build clean
            fi
         fi

         local_clean "$@"
         mulle-bootstrap ${BOOTSTRAP_FLAGS} clean ${BOOTSTRAP_OPTIONS} "$@" ${cleandefault}
      ;;

      test)
         # check this first
         testdir="${TESTS:-tests}"
         if [ ! -x "${testdir}/run-test.sh" ]
         then
            fail "Don't know how to run tests (${testdir}/run-test.sh is missing)"
         fi

         if [ -x "${testdir}/build-test.sh" ]
         then
             ( exekutor cd "${testdir}" ; exekutor "./build-test.sh" "$@" ) || exit 1
         else
            DONT_INSTALL=YES local_mode "$@" || exit 1
         fi

         ( exekutor cd "${testdir}" ; exekutor "./run-test.sh" "$@" ) || exit 1
      ;;

      # catches all paths and URLS, abolute, relative

      # other commands forward to mulle-bootstrap
      *)
         mulle-bootstrap ${BOOTSTRAP_FLAGS} "${command}" ${BOOTSTRAP_OPTIONS} "$@" || exit 1
      ;;

   esac
}


main "$@"
